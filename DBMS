Ques 1: What is DBMS ?
Ans : Database Management System (DBMS) is a software for storing and retrieving users' data while considering appropriate security measures. It consists of a group of
    programs which manipulate the database. The DBMS accepts the request for data from an application and instructs the operating system to provide the specific data. 
    In large systems, a DBMS helps users and other third-party software to store and retrieve data.
   
   It can be used for:- 
      Creation of a database.
      Retrieval of information from the database.
      Updating the database.
      Managing a database.
      
      
      
Ques 2:   What us VIEW in dbms ?
Ans : - Views in SQL are considered as a virtual table. A view also contains rows and columns.
        To create the view, we can select the fields from one or more tables present in the database.
        A view can either have specific rows based on certain condition or all the rows of a table.
      
      Syntax:
          CREATE VIEW view_name AS SELECT column1, column2..... FROM table_name WHERE condition;
          SELECT * FROM table ;
          

Que 3 :-what is  Normalization ?
Ans :-  1) Normalization is the process of organizing the data in the database.
        2) Normalization is used to minimize the redundancy from a relation or set of relations. It is also used to eliminate the undesirable characteristics
          like Insertion, Update and Deletion Anomalies.
        3) Normalization divides the larger table into the smaller table and links them using relationship.
        4) The normal form is used to reduce redundancy from the database table.
        
        Normal Form	        Description
   ---------------------------------------------------------------------------------------------------------------------------------------------
          1NF	         |       A relation is in 1NF if it contains an atomic value.
          2NF          |      	A relation will be in 2NF if it is in 1NF and all non-key attributes are fully functional dependent on the primary key.
          3NF          |     	A relation will be in 3NF if it is in 2NF and no transition dependency exists.
          4NF          |   	A relation will be in 4NF if it is in Boyce Codd normal form and has no multi-valued dependency.
          5NF          |     	A relation is in 5NF if it is in 4NF and not contains any join dependency and joining should be lossless.
          
 
 
Ques 4: Deletion of duplicate row in table ?
Ans :  1)  SELECT 
                [FirstName], [LastName], [Country], COUNT(*) AS CNT 
                FROM EMployee_table
                GROUP BY [FirstName],  [LastName], [Country] 
                HAVING COUNT(*) > 1;
                
        2)    SELECT *
                FROM EMployee_table
                WHERE ID NOT IN
                (
                    SELECT MAX(ID)
                    FROM EMployee_table
                    GROUP BY [FirstName], 
                             [LastName], 
                             [Country]
                );
                
                
Ques 5: copy all date 1 table into another table ?
Ans :  INSERT INTO table2 SELECT * FROM table1 WHERE condition;

Ques 6: What is a Stored Procedure?
Ans :  A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.
      So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it
      
      Stored Procedure Syntax:
          CREATE PROCEDURE procedure_name  AS  sql_statement GO;
          
      Execute a Stored Procedure :
          EXEC procedure_name ;
          
      Example  :
          CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10) AS SELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode GO;
          EXEC SelectAllCustomers @City = 'London', @PostalCode = 'WA1 1DP';
          
     
Ques 7 : Create duplicate table with or without data ?
Ans :      without data:
                CREATE TABLE new_table LIKE original_table;
              
           With data :
                1) CREATE TABLE new_table LIKE original_table;                  // Creating an Empty Table
                    INSERT INTO new_table SELECT * FROM original_table;      // Inserting Data into Table
                2)  CREATE TABLE new_table SELECT * FROM original_table;   // simple cloning
                
Ques 8: Fetch even and odd record in table ?
Ans :  -->   SELECT * FROM EMPLOYEE  WHERE id IN ( SELECT id FROM EMPLOYEE WHERE id%2 = 0 );     // even data
        -->  SELECT * FROM EMPLOYEE  WHERE id IN(SELECT id FROM EMPLOYEE WHERE id%2 <> 0);        // odd data

Ques 9: What is case study in DBMS?
Ans: Patients having different kinds of ailments come to the hospital and get checkup done from the concerned doctors. ... 
    The aim of this case study is to design and develop a database for the hospital to maintain the records of various departments, rooms, and doctors in the hospital.

        
Ques 10:  fetch last row in table ?
Ans :- select * from getLastRecord ORDER BY id DESC LIMIT 1;

        SELECT LAST (column_name) FROM table_name;      //   The last() function is used to return the last value of the specified column
                    You should note that the last() function is only supported in MS Access
                    
         SELECT column_name FROM table_name  ORDER BY column_name DESC  LIMIT 1;  

Ques 11 : What is Group by Clause ?
Ans : The SQL GROUP BY clause is used in collaboration with the SELECT statement to arrange identical data into groups. This GROUP BY clause follows the 
        WHERE clause in a SELECT statement and precedes the ORDER BY clause.
        
        SELECT column1, column2FROM table_name WHERE [ conditions ] GROUP BY column1, column2 ORDER BY column1, column2.
        
Ques 12 : What is INDEX ? 
Ans : The INDEX is used to create and retrieve data from the database very quickly. An Index can be created by using a single or group of columns in a table. 
        When the index is created, it is assigned a ROWID for each row before it sorts out the data.
        
        CREATE INDEX index_name  ON table_name ( column1, column2.....);
        
Ques 13 : What is HAVING Clause ?
Ans : The HAVING Clause enables you to specify conditions that filter which group results appear in the results.
        The WHERE clause places conditions on the selected columns, whereas the HAVING clause places conditions on groups created by the GROUP BY clause.
        
        SELECT column1, column2 FROM table1, table2 WHERE [ conditions ] GROUP BY column1, column2 HAVING [ conditions ] ORDER BY column1, column2 .
        
Ques 14: find the 2nd highes and Nth highest salary ?
Ans :   1)  SELECT MAX(salary) FROM Employee WHERE Salary NOT IN ( SELECT Max(Salary) FROM Employee);
        2)  SELECT MAX(Salary) From Employee WHERE Salary < ( SELECT Max(Salary) FROM Employee);
        3)  SELECT name, MAX(salary) AS salary FROM employee WHERE salary < (SELECT MAX(salary)  FROM employee);
        4)  SELECT Id, Salary FROM Employee e WHERE N-1 = (SELECT COUNT(DISTINCT Salary) FROM Employee p WHERE p.Salary  > e.Salary)
        5)  SELECT name, salary FROM employee A WHERE n-1 = (SELECT count(1)  FROM employee B  WHERE B.salary > A.salary)  

Ques 15: write a query to get date of next months last day.                         ( Infosys ) 
Ans :  1)   SELECT EOMONTH('02/04/2016')                -------->>  Returns  02/29/2016
                EOMONTH() function returns the last day of the month
                
        2)  DATEADD(interval, number, date)       --> interval = year , month , day
            example :- SELECT DATEADD(year, 1, '2017/08/25') AS DateAdd;
            
            
------->>3) SELECT LAST_DAY(  DATEADD(interval, number, date ) )   
            
            
Ques 16 : What is cardinality ?
Ans :   1)  Many-to-Many cardinality (m:n)
        2)  Many-to-One cardinality (m:1)
        3)  One-to-Many cardinality (1:n)
        4)  One-to-One cardinality (1:1 )
        
        
        
Ques 17: What is trigger ?
Ans :  A trigger is a stored procedure in database which automatically invokes whenever a special event in the database occurs.
        For example, a trigger can be invoked when a row is inserted into a specified table or when certain table columns are being updated.
        
        Syntax: create trigger [trigger_name]  [before | after]   {insert | update | delete}  on [table_name]  [for each row]  [trigger_body] 
        Example : create trigger stud_marks  before INSERT on Student for each row set Student.total = Student.subj1 + Student.subj2 + Student.subj3, 
                                                                                                    Student.per = Student.total * 60 / 100;
                                                                                                    
 Ques 18 : write a query for Nth higher or Nth lower salary find using TOP or without ?
 Ans :   Using TOP :
            higher-    1)  SELECT TOP 1 Salary AS 'Higest Salary',Name FROM (SELECT DISTINCT TOP 3 Salary,Name FROM tblSalary ORDER BY Salary DESC) a ORDER BY Salary ASC  
                      main  --->   SELECT DISTINCT TOP 3 Salary,Name FROM tblSalary ORDER BY Salary DESC
                      
              lower-  2)  SELECT TOP 1 Salary AS 'Lowest Salary',Name FROM (SELECT DISTINCT TOP 3 salary,Name FROM tblSalary ORDER BY Salary ASC) a ORDER BY Salary DESC   
                        main --->  SELECT DISTINCT TOP 3 salary,Name FROM tblSalary ORDER BY Salary ASC
                        
                        
            Without using TOP :
                higher - 1)   SELECT Name, Salary FROM tblSalary a1 WHERE N-1 = (SELECT COUNT(DISTINCT Salary) FROM tblSalary a2 WHERE a2.Salary > a1.Salary)
                
                lowest - 2)     SELECT Name, Salary FROM tblSalary a1 WHERE N-1 = (SELECT COUNT(DISTINCT Salary) FROM tblSalary a2 WHERE a2.Salary < a1.Salary)
                
                
                
                
 Ques 19 : What is Order BY in sql ? 
 Ans :   The ORDER BY statement in sql is used to sort the fetched data in either ascending or descending according to one or more columns.
             By default ORDER BY sorts the data in ascending order.
            We can use the keyword DESC to sort the data in descending order and the keyword ASC to sort in ascending order.
            
            1)  SELECT * FROM table_name ORDER BY column_name ASC|DESC
            2)  SELECT * FROM table_name ORDER BY column1 ASC|DESC , column2 ASC|DESC
            
            
            
Ques 20: What is self join ?
Ans : Self-join allows us to join a table itself. It is useful when a user wants to compare the data (rows) within the same table.
        Syntax : -   select  select_list from T t1 [Inner|Left] Join on T t2  on join_predicate.
        
                            Here T refers to the table we use for comparison and it is referred twice. To avoid errors and confusion, 
                            t1 and t2 are used along T for comparing two rows in the same table. Inner join or Left join is used for self 
                            join to avoid errors.
                            
                            
                            
Ques 21 : What is Cross Join ? 
Ans :   Cross join allows us to join each and every row of both the tables. It is similar to the cartesian product that joins all the rows.
        Syntax:- select  select_list  from T1 cross join T2








Ques 22 : join query 
Ans :       1)   SELECT table1.column1,table1.column2,table2.column1,.... FROM table1 INNER JOIN table2 ON table1.matching_column = table2.matching_column;
                    SELECT StudentCourse.COURSE_ID, Student.NAME, Student.AGE FROM Student INNER JOIN StudentCourse ON Student.ROLL_NO = StudentCourse.ROLL_NO;
                    
             2)     SELECT table1.column1,table1.column2,table2.column1,.... FROM table1  LEFT JOIN table2 ON table1.matching_column = table2.matching_column;
              3)  SELECT Student.NAME,StudentCourse.COURSE_ID  FROM Student RIGHT JOIN StudentCourse  ON StudentCourse.ROLL_NO = Student.ROLL_NO;
              4)  SELECT table1.column1,table1.column2,table2.column1,.... FROM table1  FULL JOIN table2 ON table1.matching_column = table2.matching_column;
              
              
  Ques 23: difference between SQL and NOSQL ?
  ANs :   1)  SQL databases are primarily called as Relational Databases (RDBMS); 
               whereas NoSQL database are primarily called as non-relational or distributed database.
               
           2)  SQL databases follow ACID properties (Atomicity, Consistency, Isolation and Durability) 
                whereas the NoSQL database follows the Brewers CAP theorem (Consistency, Availability and Partition tolerance).
                
            3)  SQL These databases have fixed or static or predefined schema
                 NOSQL They have have dynamic schema.
                 
                 
  Ques 24: What is Cluster ?
  Ans : 1)  When the two or more records are stored in the same file, it is known as clusters. These files will have two or more tables in the same data block,
               and key attributes which are used to map these tables together are stored only once.
         2) This method reduces the cost of searching for various records in different files.
         
         Type :
         1) INdexed Cluster : In indexed cluster, records are grouped based on the cluster key and stored together. 
             Here, all the records are grouped based on the cluster key- DEP_ID and all the records are grouped.
        2) Hash Clusters: It is similar to the indexed cluster. In hash cluster, instead of storing the records based on the cluster key,
                            we generate the value of the hash key for the cluster key and store the records with the same hash key value.


Ques 25 : advantage of truncate over delete
Ans: The DELETE statement removes rows one at a time and inserts an entry in the transaction log for each removed row. On the other hand, 
     the TRUNCATE TABLE statement deletes the data by deallocating the data pages used to store the table data and inserts only the page deallocations in the transaction logs.
     
     
Ques 26: what is data model ?
Ans:  Data models define how data is connected to each other and how they are processed and stored inside the system.
        Data models define how the logical structure of a database is modeled. Data Models are fundamental entities to introduce abstraction in a DBMS.
        ER model
        Relational model
        
Ques 27: What is Database Schema?
ANs:  A database schema is the skeleton structure that represents the logical view of the entire database. It defines how the data is organized and how the 
       relations among them are associated. It formulates all the constraints that are to be applied on the data.
       
       
 Ques 28: ACID properties?
 Ans: A transaction is a very small unit of a program and it may contain several lowlevel tasks. A transaction in a database system must maintain
        Atomicity, Consistency, Isolation, and Durability − commonly known as ACID properties − in order to ensure accuracy, completeness, and data integrity.
        
        Atomicity − This property states that a transaction must be treated as an atomic unit, that is, either all of its operations are executed or none.
                There must be no state in a database where a transaction is left partially completed. States should be defined either before the execution of the
                  transaction or after the execution/abortion/failure of the transaction.
                  
        Consistency − The database must remain in a consistent state after any transaction. No transaction should have any adverse effect on the data residing 
                    in the database. If the database was in a consistent state before the execution of a transaction, it must remain consistent after the execution of 
                    the transaction as well.
                    
         Isolation − In a database system where more than one transaction are being executed simultaneously and in parallel, the property of isolation states that
                    all the transactions will be carried out and executed as if it is the only transaction in the system. No transaction will affect the existence of 
                    any other transaction.
                    
         Durability − The database should be durable enough to hold all its latest updates even if the system fails or restarts. If a transaction updates a 
                    chunk of data in a database and commits, then the database will hold the modified data. If a transaction commits but the system fails before the 
                        data could be written on to the disk, then that data will be updated once the system springs back into action.
                        
                        
Ques 29: What is Serializability?
Ans: When multiple transactions are being executed by the operating system in a multiprogramming environment, there are possibilities that instructions of 
        one transactions are interleaved with some other transaction.
        
Ques 30 : States of Transactions ?
ANs:  Active − In this state, the transaction is being executed. This is the initial state of every transaction.
       Partially Committed − When a transaction executes its final operation, it is said to be in a partially committed state.
        Failed − A transaction is said to be in a failed state if any of the checks made by the database recovery system fails. A failed transaction can no longer
                proceed further.
        Aborted − If any of the checks fails and the transaction has reached a failed state, then the recovery manager rolls back all its write operations on the 
                    database to bring the database back to its original state where it was prior to the execution of the transaction. Transactions in this state 
                    are called aborted. The database recovery module can select one of the two operations after a transaction aborts −
        Committed − If a transaction executes all its operations successfully, it is said to be committed. All its effects are now permanently established on the
                    database system.
